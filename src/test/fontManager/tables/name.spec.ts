import { describe, it, expect, assert } from 'vitest'
import { parse, create } from '@/fontManager/tables/name'
import { hex, unhex } from '../utils'
import { IFont } from '@/fontManager/font'

describe('name table', () => {
	const data = '00 00 00 22 01 9E 00 01 00 00 00 00 00 00 00 01 00 32 00 01 00 00 00 00 00 01 00 08 00 00 00 01 00 00 00 00 00 02 00 06 00 18 00 01 00 00 00 00 00 03 00 11 00 A2 00 01 00 00 00 00 00 04 00 0F 00 2A 00 01 00 00 00 00 00 05 00 0B 00 81 00 01 00 00 00 00 00 06 00 0E 00 57 00 01 00 00 00 00 00 07 00 01 00 32 00 01 00 00 00 00 00 08 00 01 00 32 00 01 00 00 00 00 00 09 00 01 00 32 00 01 00 00 00 00 00 0A 00 01 00 32 00 01 00 00 00 00 00 0B 00 01 00 32 00 01 00 00 00 00 00 0C 00 01 00 32 00 01 00 00 00 00 00 0D 00 01 00 32 00 01 00 00 00 00 00 0E 00 01 00 32 00 01 00 00 00 00 00 10 00 08 00 00 00 01 00 00 00 00 00 11 00 06 00 18 00 03 00 01 04 09 00 00 00 02 00 49 00 03 00 01 04 09 00 01 00 10 00 08 00 03 00 01 04 09 00 02 00 0C 00 1E 00 03 00 01 04 09 00 03 00 22 00 B3 00 03 00 01 04 09 00 04 00 1E 00 39 00 03 00 01 04 09 00 05 00 16 00 8C 00 03 00 01 04 09 00 06 00 1C 00 65 00 03 00 01 04 09 00 07 00 02 00 49 00 03 00 01 04 09 00 08 00 02 00 49 00 03 00 01 04 09 00 09 00 02 00 49 00 03 00 01 04 09 00 0A 00 02 00 49 00 03 00 01 04 09 00 0B 00 02 00 49 00 03 00 01 04 09 00 0C 00 02 00 49 00 03 00 01 04 09 00 0D 00 02 00 49 00 03 00 01 04 09 00 0E 00 02 00 49 00 03 00 01 04 09 00 10 00 10 00 08 00 03 00 01 04 09 00 11 00 0C 00 1E 75 6E 74 69 74 6C 65 64 00 75 00 6E 00 74 00 69 00 74 00 6C 00 65 00 64 4D 65 64 69 75 6D 00 4D 00 65 00 64 00 69 00 75 00 6D 75 6E 74 69 74 6C 65 64 20 4D 65 64 69 75 6D 00 75 00 6E 00 74 00 69 00 74 00 6C 00 65 00 64 00 20 00 4D 00 65 00 64 00 69 00 75 00 6D 75 6E 74 69 74 6C 65 64 4D 65 64 69 75 6D 00 75 00 6E 00 74 00 69 00 74 00 6C 00 65 00 64 00 4D 00 65 00 64 00 69 00 75 00 6D 56 65 72 73 69 6F 6E 20 30 2E 31 00 56 00 65 00 72 00 73 00 69 00 6F 00 6E 00 20 00 30 00 2E 00 31 20 3A 75 6E 74 69 74 6C 65 64 20 4D 65 64 69 75 6D 00 20 00 3A 00 75 00 6E 00 74 00 69 00 74 00 6C 00 65 00 64 00 20 00 4D 00 65 00 64 00 69 00 75 00 6D'

  const font: IFont = {
		characters: [],
		settings: {
			unitsPerEm: 1000,
			ascender: 800,
			descender: -200,
		}
	}

	it('parse data correctly', () => {
		const nameTable = JSON.parse('{"version":0,"count":34,"storageOffset":414,"nameRecord":[{"platformID":1,"encodingID":0,"languageID":0,"nameID":0,"length":1,"stringOffset":50},{"platformID":1,"encodingID":0,"languageID":0,"nameID":1,"length":8,"stringOffset":0},{"platformID":1,"encodingID":0,"languageID":0,"nameID":2,"length":6,"stringOffset":24},{"platformID":1,"encodingID":0,"languageID":0,"nameID":3,"length":17,"stringOffset":162},{"platformID":1,"encodingID":0,"languageID":0,"nameID":4,"length":15,"stringOffset":42},{"platformID":1,"encodingID":0,"languageID":0,"nameID":5,"length":11,"stringOffset":129},{"platformID":1,"encodingID":0,"languageID":0,"nameID":6,"length":14,"stringOffset":87},{"platformID":1,"encodingID":0,"languageID":0,"nameID":7,"length":1,"stringOffset":50},{"platformID":1,"encodingID":0,"languageID":0,"nameID":8,"length":1,"stringOffset":50},{"platformID":1,"encodingID":0,"languageID":0,"nameID":9,"length":1,"stringOffset":50},{"platformID":1,"encodingID":0,"languageID":0,"nameID":10,"length":1,"stringOffset":50},{"platformID":1,"encodingID":0,"languageID":0,"nameID":11,"length":1,"stringOffset":50},{"platformID":1,"encodingID":0,"languageID":0,"nameID":12,"length":1,"stringOffset":50},{"platformID":1,"encodingID":0,"languageID":0,"nameID":13,"length":1,"stringOffset":50},{"platformID":1,"encodingID":0,"languageID":0,"nameID":14,"length":1,"stringOffset":50},{"platformID":1,"encodingID":0,"languageID":0,"nameID":16,"length":8,"stringOffset":0},{"platformID":1,"encodingID":0,"languageID":0,"nameID":17,"length":6,"stringOffset":24},{"platformID":3,"encodingID":1,"languageID":1033,"nameID":0,"length":2,"stringOffset":73},{"platformID":3,"encodingID":1,"languageID":1033,"nameID":1,"length":16,"stringOffset":8},{"platformID":3,"encodingID":1,"languageID":1033,"nameID":2,"length":12,"stringOffset":30},{"platformID":3,"encodingID":1,"languageID":1033,"nameID":3,"length":34,"stringOffset":179},{"platformID":3,"encodingID":1,"languageID":1033,"nameID":4,"length":30,"stringOffset":57},{"platformID":3,"encodingID":1,"languageID":1033,"nameID":5,"length":22,"stringOffset":140},{"platformID":3,"encodingID":1,"languageID":1033,"nameID":6,"length":28,"stringOffset":101},{"platformID":3,"encodingID":1,"languageID":1033,"nameID":7,"length":2,"stringOffset":73},{"platformID":3,"encodingID":1,"languageID":1033,"nameID":8,"length":2,"stringOffset":73},{"platformID":3,"encodingID":1,"languageID":1033,"nameID":9,"length":2,"stringOffset":73},{"platformID":3,"encodingID":1,"languageID":1033,"nameID":10,"length":2,"stringOffset":73},{"platformID":3,"encodingID":1,"languageID":1033,"nameID":11,"length":2,"stringOffset":73},{"platformID":3,"encodingID":1,"languageID":1033,"nameID":12,"length":2,"stringOffset":73},{"platformID":3,"encodingID":1,"languageID":1033,"nameID":13,"length":2,"stringOffset":73},{"platformID":3,"encodingID":1,"languageID":1033,"nameID":14,"length":2,"stringOffset":73},{"platformID":3,"encodingID":1,"languageID":1033,"nameID":16,"length":16,"stringOffset":8},{"platformID":3,"encodingID":1,"languageID":1033,"nameID":17,"length":12,"stringOffset":30}],"stringPool":[117,110,116,105,116,108,101,100,0,117,0,110,0,116,0,105,0,116,0,108,0,101,0,100,77,101,100,105,117,109,0,77,0,101,0,100,0,105,0,117,0,109,117,110,116,105,116,108,101,100,32,77,101,100,105,117,109,0,117,0,110,0,116,0,105,0,116,0,108,0,101,0,100,0,32,0,77,0,101,0,100,0,105,0,117,0,109,117,110,116,105,116,108,101,100,77,101,100,105,117,109,0,117,0,110,0,116,0,105,0,116,0,108,0,101,0,100,0,77,0,101,0,100,0,105,0,117,0,109,86,101,114,115,105,111,110,32,48,46,49,0,86,0,101,0,114,0,115,0,105,0,111,0,110,0,32,0,48,0,46,0,49,32,58,117,110,116,105,116,108,101,100,32,77,101,100,105,117,109,0,32,0,58,0,117,0,110,0,116,0,105,0,116,0,108,0,101,0,100,0,32,0,77,0,101,0,100,0,105,0,117,0,109]}')
		delete nameTable.stringPool
		const table = parse(unhex(data), 0, font)
		table.nameRecord.map((record) => {
			if (record.str) {
				delete record.str
			}
		})

		assert.deepEqual(table, nameTable)
	})

	it('create data correctly', () => {
		const nameTable = JSON.parse('{"version":0,"count":34,"storageOffset":414,"nameRecord":[{"platformID":1,"encodingID":0,"languageID":0,"nameID":0,"length":1,"stringOffset":50},{"platformID":1,"encodingID":0,"languageID":0,"nameID":1,"length":8,"stringOffset":0},{"platformID":1,"encodingID":0,"languageID":0,"nameID":2,"length":6,"stringOffset":24},{"platformID":1,"encodingID":0,"languageID":0,"nameID":3,"length":17,"stringOffset":162},{"platformID":1,"encodingID":0,"languageID":0,"nameID":4,"length":15,"stringOffset":42},{"platformID":1,"encodingID":0,"languageID":0,"nameID":5,"length":11,"stringOffset":129},{"platformID":1,"encodingID":0,"languageID":0,"nameID":6,"length":14,"stringOffset":87},{"platformID":1,"encodingID":0,"languageID":0,"nameID":7,"length":1,"stringOffset":50},{"platformID":1,"encodingID":0,"languageID":0,"nameID":8,"length":1,"stringOffset":50},{"platformID":1,"encodingID":0,"languageID":0,"nameID":9,"length":1,"stringOffset":50},{"platformID":1,"encodingID":0,"languageID":0,"nameID":10,"length":1,"stringOffset":50},{"platformID":1,"encodingID":0,"languageID":0,"nameID":11,"length":1,"stringOffset":50},{"platformID":1,"encodingID":0,"languageID":0,"nameID":12,"length":1,"stringOffset":50},{"platformID":1,"encodingID":0,"languageID":0,"nameID":13,"length":1,"stringOffset":50},{"platformID":1,"encodingID":0,"languageID":0,"nameID":14,"length":1,"stringOffset":50},{"platformID":1,"encodingID":0,"languageID":0,"nameID":16,"length":8,"stringOffset":0},{"platformID":1,"encodingID":0,"languageID":0,"nameID":17,"length":6,"stringOffset":24},{"platformID":3,"encodingID":1,"languageID":1033,"nameID":0,"length":2,"stringOffset":73},{"platformID":3,"encodingID":1,"languageID":1033,"nameID":1,"length":16,"stringOffset":8},{"platformID":3,"encodingID":1,"languageID":1033,"nameID":2,"length":12,"stringOffset":30},{"platformID":3,"encodingID":1,"languageID":1033,"nameID":3,"length":34,"stringOffset":179},{"platformID":3,"encodingID":1,"languageID":1033,"nameID":4,"length":30,"stringOffset":57},{"platformID":3,"encodingID":1,"languageID":1033,"nameID":5,"length":22,"stringOffset":140},{"platformID":3,"encodingID":1,"languageID":1033,"nameID":6,"length":28,"stringOffset":101},{"platformID":3,"encodingID":1,"languageID":1033,"nameID":7,"length":2,"stringOffset":73},{"platformID":3,"encodingID":1,"languageID":1033,"nameID":8,"length":2,"stringOffset":73},{"platformID":3,"encodingID":1,"languageID":1033,"nameID":9,"length":2,"stringOffset":73},{"platformID":3,"encodingID":1,"languageID":1033,"nameID":10,"length":2,"stringOffset":73},{"platformID":3,"encodingID":1,"languageID":1033,"nameID":11,"length":2,"stringOffset":73},{"platformID":3,"encodingID":1,"languageID":1033,"nameID":12,"length":2,"stringOffset":73},{"platformID":3,"encodingID":1,"languageID":1033,"nameID":13,"length":2,"stringOffset":73},{"platformID":3,"encodingID":1,"languageID":1033,"nameID":14,"length":2,"stringOffset":73},{"platformID":3,"encodingID":1,"languageID":1033,"nameID":16,"length":16,"stringOffset":8},{"platformID":3,"encodingID":1,"languageID":1033,"nameID":17,"length":12,"stringOffset":30}],"stringPool":[117,110,116,105,116,108,101,100,0,117,0,110,0,116,0,105,0,116,0,108,0,101,0,100,77,101,100,105,117,109,0,77,0,101,0,100,0,105,0,117,0,109,117,110,116,105,116,108,101,100,32,77,101,100,105,117,109,0,117,0,110,0,116,0,105,0,116,0,108,0,101,0,100,0,32,0,77,0,101,0,100,0,105,0,117,0,109,117,110,116,105,116,108,101,100,77,101,100,105,117,109,0,117,0,110,0,116,0,105,0,116,0,108,0,101,0,100,0,77,0,101,0,100,0,105,0,117,0,109,86,101,114,115,105,111,110,32,48,46,49,0,86,0,101,0,114,0,115,0,105,0,111,0,110,0,32,0,48,0,46,0,49,32,58,117,110,116,105,116,108,101,100,32,77,101,100,105,117,109,0,32,0,58,0,117,0,110,0,116,0,105,0,116,0,108,0,101,0,100,0,32,0,77,0,101,0,100,0,105,0,117,0,109]}')
		expect(hex(create(nameTable))).toBe(data)
	})
})